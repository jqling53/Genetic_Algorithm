% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select.R
\name{select}
\alias{select}
\title{select}
\usage{
select(
  data,
  response,
  chromosome_length = ncol(data) - 1,
  population_size = 2 * chromosome_length,
  FUN = AIC,
  minimize = TRUE,
  num_partitions = floor(population_size/3),
  genetic_operator = crossover,
  num_split = 1,
  mutate_probability = 0.01,
  stop_criterion = 0.05,
  parent_selection = "tournament",
  ...
)
}
\arguments{
\item{data}{full data set}

\item{response}{string with the name of the response variable}

\item{chromosome_length}{number of chromosomes (variables) that the user wants to be included}

\item{population_size}{size of the generation/population}

\item{FUN}{fitness function, default AIC, but it could be any function that receives a glm model as parameter}

\item{minimize}{depending on the FUN, if the user wants to minimize or maximize it}

\item{num_partitions}{number of partitions in the selection step}

\item{num_split}{number of splits in the crossover}

\item{mutate_probability}{probability of mutation}

\item{stop_criterion}{stops the algorithm when the last 5 generations vary by less than this percentage}

\item{parent_selection}{which parent selection algorithm should be used. Can be: 'rank' or 'tournament'}

\item{...}{other parameters for the glm function, for instance, family.}

\item{genetic_opterator}{type of genetic operator the user wants to use}
}
\value{
data frame with the population
}
\description{
Conducts variable selection for a linear model
}
\examples{
# Examples
library(GA)
set.seed(34)

##  Simple linear regression:
# Create data
rows <- 1000
columns <- 100
data <- as.data.frame(matrix(runif(rows * columns,0,1),
                            ncol = columns, nrow = rows))

chromosome_length <- columns - 1

final <- select(data = data, 
               response = "V1", 
               chromosome_length = chromosome_length,
               num_partitions = 15, 
               mutate_probability = 0.01,
               num_split = 3,
               stop_criterion = 0.05,
               minimize = FALSE)
names(final)
# Find the fittest individual:
final$overall_best_individual
final$last_5_gen_fitness
final$overall_best_fitness
final$last_gen_best_fitness
final$fitness_vec
## GLM: binomial family:
# Create data:
rows <- 1000
columns <- 100
data <- as.data.frame(matrix( runif(rows*columns,0,1),
                             ncol = columns, nrow = rows))
head(data)

# Convert the response in binary so we can use family = binomial:
data$V1 <- round(data$V1,0)

# Run the Genetic algorithm:
final <- select(data = data, 
               response = "V1", 
               chromosome_length = chromosome_length, 
               num_partitions = 15, 
               mutate_probability = 0.02,
               num_split = 4,
               stop_criterion = 0.04,
               family = binomial)

# Find the fittest individual:
final$overall_best_individual
}
